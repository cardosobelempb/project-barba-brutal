import { useAuthUser } from '@/contexts'
import { SignInZodSchema } from '@/schemas/signInZodSchema'

import { SubmitSigninHandler, useSigninLib } from './signin.lib'

/**
 * üß© Hook respons√°vel por orquestrar o fluxo de login.
 *
 * - Integra o formul√°rio (useSigninLib) com o contexto de autentica√ß√£o (useAuthUser)
 * - Faz a submiss√£o do login com tratamento de erros e loading
 * - Retorna props do formul√°rio + handler do submit
 */
export const useSignin = () => {
  const { signIn } = useAuthUser()
  const { formProps, loading, setLoading, setError, error } = useSigninLib()

  /**
   * Handler de submiss√£o do formul√°rio de login
   * @param data Dados validados pelo Zod (email, password)
   */
  const handleSignin: SubmitSigninHandler = async (data: SignInZodSchema) => {
    try {
      setLoading(true)

      // 1Ô∏è‚É£ Executa o login via contexto global
      await signIn(data)

      // 2Ô∏è‚É£ Caso o login falhe, o contexto deve lan√ßar um erro tratado
      // (e.g., UnauthorizedError, NetworkError, etc.)
    } catch (error: any) {
      // ‚úÖ Tratamento de erros centralizado e user-friendly
      if (error.response?.status === 401) {
        setError('Credenciais inv√°lidas. Verifique seu e-mail e senha.')
      } else if (error.message === 'Network Error') {
        setError('Falha na conex√£o. Tente novamente mais tarde.')
      } else {
        setError('Erro inesperado. Tente novamente.')
      }
    } finally {
      setLoading(false)
    }
  }

  return {
    formProps,
    handleSignin,
    loading,
    error
  }
}
