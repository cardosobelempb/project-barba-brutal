import {
  BadRequestException,
  createParamDecorator,
  ExecutionContext,
} from '@nestjs/common';
import { Request } from 'express';

export const ParamNumber = createParamDecorator(
  (paramName: string, context: ExecutionContext): number => {
    const request = context.switchToHttp().getRequest<Request>();

    const rawValue = request.params[paramName];

    if (rawValue === undefined) {
      throw new BadRequestException(
        `Par√¢metro '${paramName}' n√£o encontrado na rota.`,
      );
    }

    const value = Number(rawValue);

    if (isNaN(value) || value <= 0) {
      throw new BadRequestException(
        `Par√¢metro '${paramName}' com valor '${rawValue}' √© inv√°lido. Deve ser um n√∫mero positivo.`,
      );
    }

    return value;
  },
);

/*
üß™ Exemplo de uso no controller:

Rota com userId:
@Get(':userId')
getUser(@ParamNumber('userId') userId: number) {
  return this.userService.findById(userId);
}

Rota com postId:
@Get(':postId/comments')
getPostComments(@ParamNumber('postId') postId: number) {
  return this.commentService.getByPost(postId);
}

Vantagem                         | Detalhe                                                          |
-------------------------------- | ---------------------------------------------------------------- |
‚úîÔ∏è Reutiliz√°vel                  | Funciona para qualquer par√¢metro da URL (`:id`, `:postId`, etc.) |
‚úîÔ∏è Valida√ß√£o embutida            | Garante que o valor seja um n√∫mero positivo                      |
‚úîÔ∏è Tipagem segura (`number`)     | Evita convers√µes manuais no controller                           |
‚úîÔ∏è Compat√≠vel com Express/NestJS | Usa `Request` de forma tipada                                    |

üß± Extens√µes futuras
Se quiser, podemos evoluir isso para aceitar:
n√∫meros negativos (opcional),
zero como v√°lido,
n√∫meros de ponto flutuante (float),
valida√ß√µes com min e max,
suporte a outros tipos (string, boolean, etc.).

*/
